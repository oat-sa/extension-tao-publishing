{"version":3,"sources":["routes.js","../provider/authSelector.js","PlatformAdmin/tpl/authContainer!tpl","PlatformAdmin/editor.js"],"names":["define","PlatformAdmin","css","actions","addInstanceForm","editInstance","urlUtil","request","getHtml","params","url","route","hb","template","Handlebars","depth0","helpers","partials","data","this","compilerInfo","merge","$","__","loadingBar","hider","authSelectorProvider","authContainerTpl","getAuthContainer","$propertyContainer","length","before","start","toggleFields","$fields","enabled","removeAttr","removeProp","attr","prop","showAuthFormPart","$allForms","$container","find","$selectedForm","value","hide","show","$elId","uri","val","then","html","each","on","catch","Error","stop"],"mappings":"AAAAA,OAAA,qCAAA,WACA,OACAC,eACAC,IAAA,gBACAC,SACAC,gBAAA,kCACAC,aAAA,uCCcAL,OAAA,uCAAA,WAAA,6BAAA,SAAAM,QAAAC,SAEA,OACAC,QAAA,SAAAC,QACA,GAAAC,KAAAJ,QAAAK,MAAA,UAAA,gBAAA,gBACA,OAAAJ,SAAAG,IAAAD,OAAA,YCxBAT,OAAA,gEAAA,cAAA,SAAAY,IACA,MAAAA,IAAAC,SAAA,SAAAC,WAAAC,OAAAC,QAAAC,SAAAC,MAMA,MALAC,MAAAC,cAAA,EAAA,YACAJ,QAAAG,KAAAE,MAAAL,QAAAF,WAAAE;AAAAE,KAAAA,SAIA,2CCYAlB,OAAA,iDACA,SACA,OACA,qBACA,WACA,sCACA,gEACA,SAAAsB,EAAAC,GAAAC,WAAAC,MAAAC,qBAAAC,kBACA,YAMA,SAAAC,oBACA,GAAAC,oBAAAP,EAAA,iCACA,OAAAO,oBAAAC,OACAD,oBAEAA,mBAAAP,EAAAK,oBACAL,EAAA,gCAAAS,OAAAF,oBACAA,oBAGA,OACAG,MAAA,WAgBA,QAAAC,cAAAC,QAAAC;AACAA,QACAD,QAAAE,WAAA,YAAAC,WAAA,YAEAH,QAAAI,KAAA,YAAA,GAAAC,KAAA,YAAA,GAQA,QAAAC,oBACA,GAAAC,WAAAC,WAAAC,KAAA,mBACAC,cAAAF,WAAAC,KAAA,sBAAAxB,KAAA0B,MAAA,KAGApB,OAAAqB,KAAAL,WACAhB,MAAAsB,KAAAH,eAGAX,aAAAQ,UAAAE,KAAA,WAAA,GACAV,aAAAW,cAAAD,KAAA,WAAA,GArCA,GAAAD,YAAAd,mBACAoB,MAAA1B,EAAA,OACAb,SAEAuC,OAAAlB,SACArB,QACAwC,IAAAD,MAAAE,QAkCA1B,WAAAQ,QACAN,qBAAAlB,QAAAC,QACA0C,KAAA,SAAAC,MAEAV,WAAAU,KAAAA,MAGAV,WAAAC,KAAA,uBACAU,KAAAb,kBACAc,GAAA,SAAAd;GACAe,MAAA,WACA,KAAA,IAAAC,OAAAjC,GAAA,sDACA4B,KAAA,WACA3B,WAAAiC","file":"routes.js","sourcesContent":["define('taoPublishing/controller/routes',[],function(){\n    return {\n        'PlatformAdmin': {\n            'css': 'auth-selector',\n            'actions': {\n                'addInstanceForm': 'controller/PlatformAdmin/editor',\n                'editInstance': 'controller/PlatformAdmin/editor'\n            }\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <olexander.zagovorychev@1pt.com>\n */\n\ndefine('taoPublishing/provider/authSelector',['util/url', 'core/dataProvider/request'], function (urlUtil, request) {\n\n    return {\n        getHtml: function (params) {\n            var url = urlUtil.route('authTpl', 'PlatformAdmin', 'taoPublishing');\n            return request(url, params, 'POST');\n        }\n    };\n});\n\n","\ndefine('tpl!taoPublishing/controller/PlatformAdmin/tpl/authContainer', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"auth-container\\\"></div>\\n\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <olexander.zagovorychev@1pt.com>\n */\n\ndefine('taoPublishing/controller/PlatformAdmin/editor',[\n    'jquery',\n    'i18n',\n    'layout/loading-bar',\n    'ui/hider',\n    'taoPublishing/provider/authSelector',\n    'tpl!taoPublishing/controller/PlatformAdmin/tpl/authContainer'\n], function ($, __, loadingBar, hider, authSelectorProvider, authContainerTpl) {\n    'use strict';\n\n    /**\n     * Get or create element for authorization form\n     * @returns {*|jQuery|HTMLElement}\n     */\n    function getAuthContainer() {\n        var $propertyContainer  = $('.content-block .auth-container');\n        if($propertyContainer.length) {\n            return $propertyContainer;\n        }\n        $propertyContainer  = $(authContainerTpl());\n        $('.content-block .form-toolbar').before($propertyContainer);\n        return $propertyContainer;\n    }\n\n    return {\n        start: function start() {\n            var $container = getAuthContainer();\n            var $elId = $('#id');\n            var params = {};\n\n            if($elId.length) {\n                params = {\n                    uri: $elId.val()\n                };\n            }\n\n            /**\n             * Enable/disable fields\n             * @param {jQuery} $fields - selection of fields\n             * @param {Boolean} enabled - enable or disable the fields\n             */\n            function toggleFields($fields, enabled) {\n                if (enabled) {\n                    $fields.removeAttr('disabled').removeProp('disabled');\n                } else {\n                    $fields.attr('disabled', true).prop('disabled', true);\n                }\n            }\n\n            /**\n             * Display the auth form part that complies to the selected auth method.\n             * Will be applied on the auth method selection combo box.\n             */\n            function showAuthFormPart() {\n                var $allForms = $container.find('.auth-form-part');\n                var $selectedForm = $container.find('[data-auth-method=\"' + this.value + '\"]');\n\n                // switch form visibility\n                hider.hide($allForms);\n                hider.show($selectedForm);\n\n                // switch sendable fields\n                toggleFields($allForms.find(':input'), false);\n                toggleFields($selectedForm.find(':input'), true);\n            }\n\n            loadingBar.start();\n            authSelectorProvider.getHtml(params)\n                .then(function (html) {\n                    // show the form, will all auth methods\n                    $container.html(html);\n\n                    // display the form parts according to the selected auth method\n                    $container.find('.auth-type-selector')\n                        .each(showAuthFormPart)\n                        .on('change', showAuthFormPart);\n                }).catch(function() {\n                    throw new Error( __('Publishing auth configuration can not be loaded'));\n                }).then(function () {\n                    loadingBar.stop();\n                });\n        }\n    };\n});\n\n"]}